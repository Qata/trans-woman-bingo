Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Graphics$Input = Elm.Graphics.Input.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Task = Elm.Task.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var slice = F3(function (xs,s,e) {
      return A2($List.take,e - s + 1,A2($List.drop,s - 1,xs));
   });
   var initialNumbers = _U.list(["Always wants to fight"
                                ,"Autistic"
                                ,"Black and purple wardrobe"
                                ,"Choker collar"
                                ,"Communist"
                                ,"Dollmaker games"
                                ,"Furry"
                                ,"Gay"
                                ,"Kiss kiss fall in love"
                                ,"Linguist"
                                ,"Loves the moon"
                                ,"Loves weird animals"
                                ,"Neon Genesis Evangelion"
                                ,"Owns tabletop simulator"
                                ,"Owns thigh high socks"
                                ,"Plays competetive smash"
                                ,"Polyamorous"
                                ,"Programmer"
                                ,"Scene phase"
                                ,"Slime"
                                ,"Tired"
                                ,"Too much salt"
                                ,"Wants to be a robot"
                                ,"Went on /d/"
                                ,"Would date an alien"]);
   var randomGenerator = A2($Random.$float,
   0,
   $Basics.toFloat($List.length(initialNumbers)));
   var generateRandomSeed = function (seed) {
      return $Basics.snd(A2($Random.generate,
      randomGenerator,
      seed));
   };
   var randomFold = F2(function (value,_p0) {
      var _p1 = _p0;
      var randomValue = A2($Random.generate,randomGenerator,_p1._1);
      var randomFloat = $Basics.fst(randomValue);
      var seed = $Basics.snd(randomValue);
      return {ctor: "_Tuple2"
             ,_0: A2($List._op["::"],
             {ctor: "_Tuple2",_0: value,_1: randomFloat},
             _p1._0)
             ,_1: seed};
   });
   var shuffle = F2(function (seed,list) {
      return A2($List.map,
      $Basics.fst,
      A2($List.sortBy,
      $Basics.snd,
      $Basics.fst(A3($List.foldr,
      randomFold,
      {ctor: "_Tuple2",_0: _U.list([]),_1: seed},
      list))));
   });
   var update = F2(function (action,model) {
      var _p2 = action;
      switch (_p2.ctor)
      {case "NoOp": return model;
         case "Shuffle": return _U.update(model,
           {bingoTiles: A2(shuffle,model.seed,model.bingoTiles)
           ,seed: generateRandomSeed(model.seed)});
         default: var _p3 = _p2._0;
           return _U.update(model,
           {windowWidth: $Basics.fst(_p3)
           ,windowHeight: $Basics.snd(_p3)});}
   });
   var UpdateWindowSize = function (a) {
      return {ctor: "UpdateWindowSize",_0: a};
   };
   var Shuffle = {ctor: "Shuffle"};
   var NoOp = {ctor: "NoOp"};
   var actions = $Signal.mailbox(NoOp);
   var model = A3($Signal.foldp,
   update,
   {seed: $Random.initialSeed(42)
   ,bingoTiles: initialNumbers
   ,windowWidth: 0
   ,windowHeight: 0},
   actions.signal);
   var view = function (model) {
      var middleAtY = $Graphics$Element.middleAt($Graphics$Element.relative(0.5));
      var boxSpacing = 2;
      var boxSize = 150;
      var sliceTilesAsText = F2(function (start,end) {
         return A2($Graphics$Element.flow,
         $Graphics$Element.right,
         A2($List.intersperse,
         A2($Graphics$Element.spacer,boxSpacing,boxSpacing),
         A2($List.map,
         $Graphics$Element.color($Color.lightGrey),
         A2($List.map,
         A3($Graphics$Element.container,
         boxSize,
         boxSize,
         $Graphics$Element.middle),
         A2($List.map,
         function (_p4) {
            return $Graphics$Element.centered(A2($Text.height,
            10,
            $Text.fromString(_p4)));
         },
         A3(slice,model.bingoTiles,start,end))))));
      });
      var bingoTiles = A2($Graphics$Element.flow,
      $Graphics$Element.down,
      A2($List.intersperse,
      A2($Graphics$Element.spacer,boxSpacing,boxSpacing),
      _U.list([A2(sliceTilesAsText,1,5)
              ,A2(sliceTilesAsText,6,10)
              ,A2(sliceTilesAsText,11,15)
              ,A2(sliceTilesAsText,16,20)
              ,A2(sliceTilesAsText,21,25)])));
      return A3($Graphics$Collage.collage,
      model.windowWidth,
      model.windowHeight,
      A2($List.map,
      $Graphics$Collage.toForm,
      _U.list([A2($Graphics$Element.above,
      A2($Graphics$Element.color,
      $Color.black,
      A4($Graphics$Element.container,
      $Graphics$Element.widthOf(bingoTiles) + boxSpacing * 2,
      $Graphics$Element.heightOf(bingoTiles) + boxSpacing * 2,
      $Graphics$Element.middle,
      bingoTiles)),
      A2($Graphics$Input.button,
      A2($Signal.message,actions.address,Shuffle),
      "Shuffle"))])));
   };
   var main = A2($Signal.map,view,model);
   var windowSizeUpdate = Elm.Native.Task.make(_elm).performSignal("windowSizeUpdate",
   A2($Signal.map,
   $Signal.send(actions.address),
   A2($Signal.map,UpdateWindowSize,$Window.dimensions)));
   var Model = F4(function (a,b,c,d) {
      return {seed: a
             ,bingoTiles: b
             ,windowWidth: c
             ,windowHeight: d};
   });
   return _elm.Main.values = {_op: _op
                             ,Model: Model
                             ,NoOp: NoOp
                             ,Shuffle: Shuffle
                             ,UpdateWindowSize: UpdateWindowSize
                             ,randomFold: randomFold
                             ,shuffle: shuffle
                             ,generateRandomSeed: generateRandomSeed
                             ,randomGenerator: randomGenerator
                             ,initialNumbers: initialNumbers
                             ,main: main
                             ,update: update
                             ,model: model
                             ,slice: slice
                             ,view: view
                             ,actions: actions};
};